import asyncio
import os
import time
from dotenv import find_dotenv, load_dotenv
from loguru import logger
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from abc import ABC, abstractmethod
import json
import csv

load_dotenv(find_dotenv())
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
logger.info("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω")
dp = Dispatcher()
logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω")

class Document(ABC):
    @abstractmethod
    def save(self, filename: str, data: dict) -> str:
        pass

class TXTDocument(Document):
    def save(self, filename: str, data: dict) -> str:
        filepath = f"{filename}.txt"
        with open(filepath, "w", encoding="UTF-8") as file:
            file.write(data["message_text"])
        return filepath

class JSONDocument(Document):
    def save(self, filename: str, data: dict) -> str:
        filepath = f"{filename}.json"
        with open(filepath, "w", encoding="UTF-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        return filepath

class CSVDocument(Document):
    def save(self, filename: str, data: dict) -> str:
        filepath = f"{filename}.csv"
        with open(filepath, "w", newline="", encoding="UTF-8") as file:
            writer = csv.writer(file)
            writer.writerow(["message_id", "message_text"])
            writer.writerow([data["message_id"], data["message_text"]])
        return filepath

class DocumentFactory:
    @staticmethod
    def create_document(doc_type: str) -> Document:
        doc_type = doc_type.lower()
        if doc_type == "txt":
            return TXTDocument()
        elif doc_type == "json":
            return JSONDocument()
        elif doc_type == "csv":
            return CSVDocument()
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {doc_type}")

def get_inline_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="JSON", callback_data="export_json"),
            InlineKeyboardButton(text="TXT", callback_data="export_txt"),
            InlineKeyboardButton(text="CSV", callback_data="export_csv"),
        ]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    data = {"name": "Silvestr", "last name": "Stallone", "film": "Rocky"}
    await message.answer("–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã: /start")
    await message.answer(
        " –í–æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –≤—ã–±–µ—Ä–∏—Ç–µ  —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        reply_markup=get_inline_keyboard()
    )

user_messages = {}

@dp.message()
async def save_user_message(message: types.Message):
    user_messages[message.from_user.id] = {
        "message_id": message.message_id,
        "message_text": message.text or message.caption or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞:("
    }
    await message.answer(
        " –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_inline_keyboard()
    )

@dp.callback_query(lambda callback: callback.data.startswith("export_"))
async def handle_button_click(callback: types.CallbackQuery):
    btn_data = callback.data.split('_')[1].lower()
    user_id = callback.from_user.id
    
    if user_id not in user_messages:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ", show_alert=True)
        return
    
    message_data = user_messages[user_id]
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        exporter = DocumentFactory.create_document(btn_data)
        filename = f"export_{user_id}_{int(time.time())}"
        filepath = exporter.save(filename, message_data)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        with open(filepath, "rb") as file:
            file_data = file.read()
        
        await bot.send_document(
            chat_id=callback.message.chat.id,
            document=BufferedInputFile(file_data, filename=f"message_export.{btn_data}"),
            caption=f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ({btn_data.upper()})"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filepath)
        await callback.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, —Å–∫–∞–∂–∏ –∫—Ä—É—Ç–æ:)")
        
    except ValueError as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    except Exception as e:
        logger.error(f"Export error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞", show_alert=True)
        if 'filepath' in locals() and os.path.exists(filepath):
            os.remove(filepath)

async def main():
    logger.add('bot.log',
               format='{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}',
               rotation="1 MB",
               retention="3 days",
               backtrace=True,
               diagnose=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())